# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreateDate
                                 A QGIS plugin
 This plugin supports entering dates into the attribute table
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Mateusz Orylski
        email                : matory@st.amu.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsField, QgsVectorLayer, QgsFeature, QgsDateTimeFieldFormatter

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .create_date_dialog import CreateDateDialog
import os.path
from datetime import timedelta, date, datetime
from dateutil.relativedelta import relativedelta
import random


class CreateDate:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreateDate_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Create Date')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreateDate', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/create_date/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Enter Dates into attribute table'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Create Date'),
                action)
            self.iface.removeToolBarIcon(action)
# funkcja tworząca losowe daty we wskazanym zakresie

    def random_dates(self):
        s_d = self.dlg.dateEdit_start.date()
        e_d = self.dlg.dateEdit_end.date()
        s_da = s_d.getDate()
        e_da = e_d.getDate()
        s_date = date(int(s_da[0]), int(s_da[1]), int(s_da[2]))
        e_date = date(int(e_da[0]), int(e_da[1]), int(e_da[2]))
        list_of_dates = []
        f_layer_name = self.dlg.comboBox.currentText()
        f_layer = QgsProject.instance().mapLayersByName(f_layer_name)[0]
        f_name = self.dlg.Field_name.text()
        dat_field = f_layer.fields().lookupField(f_name)
        num_of_rows = len(list(f_layer.getFeatures()))
        for i in range(num_of_rows):
            time_between_dates = e_date - s_date
            days_between_dates = time_between_dates.days
            random_number_of_days = random.randrange(days_between_dates)
            random_date = s_date + timedelta(days=random_number_of_days)
            list_of_dates.append(random_date)
        f_layer.startEditing()
        i = 0
        for feat in f_layer.getFeatures():
            f_layer.changeAttributeValue(
                feat.id(), dat_field, list_of_dates[i].strftime("%Y-%m-%d"))
            i += 1
        f_layer.commitChanges()
# funkcja tworząca nową kolumne w warstwie wektorowej

    def create_data_field(self):
        f_layer_name = self.dlg.comboBox.currentText()
        f_layer = QgsProject.instance().mapLayersByName(f_layer_name)[0]
        f_name = self.dlg.Field_name.text()
        field_index = f_layer.fields().indexFromName(f_name)
        if field_index == -1:
            f_layer_provider = f_layer.dataProvider()
            f_layer_provider.addAttributes([QgsField(f_name, QVariant.Date)])
            f_layer.updateFields()
        else:
            print("The field {} already exists in layer {}!".format(
                f_name, f_layer.name()))
# funkcja tworząca nową kolumnę INT liczaca ilośc dni które upłyneły od wygenerowanej daty do dziś date.today()

    def count_days(self):
        if self.dlg.checkBox_days.isChecked():
            # creating new field for days
            f_layer_name = self.dlg.comboBox.currentText()
            f_layer = QgsProject.instance().mapLayersByName(f_layer_name)[0]
            f_name = self.dlg.Field_name.text()
            field_index = f_layer.fields().indexFromName("{}_Days".format(f_name))
            if field_index == -1:
                layer_provider = f_layer.dataProvider()
                layer_provider.addAttributes(
                    [QgsField("{}_Days".format(f_name), QVariant.Int)])
                f_layer.updateFields()
            else:
                print("The field {}_Days already exists in layer {}!".format(
                    f_name, f_layer.name()))
            # counting days
            day_field = f_layer.fields().lookupField("{}_Days".format(f_name))
            f_layer.startEditing()
            i = 0
            for feat in f_layer.getFeatures():
                day = f_layer.getFeature(i)[f_name].getDate()
                dateDay = date(int(day[0]), int(day[1]), int(day[2]))
                f_layer.changeAttributeValue(
                    feat.id(), day_field, (date.today() - dateDay).days)
                i += 1
            f_layer.commitChanges()
# funkcja tworząca nową kolumnę INT liczaca ilośc miesięcy które upłyneły od wygenerowanej daty do dziś date.today()

    def count_months(self):
        if self.dlg.checkBox_months.isChecked():
            # creating new field for months
            f_layer_name = self.dlg.comboBox.currentText()
            f_layer = QgsProject.instance().mapLayersByName(f_layer_name)[0]
            f_name = self.dlg.Field_name.text()
            field_index = f_layer.fields().indexFromName("{}_Month".format(f_name))
            if field_index == -1:
                layer_provider = f_layer.dataProvider()
                layer_provider.addAttributes(
                    [QgsField("{}_Month".format(f_name), QVariant.Int)])
                f_layer.updateFields()
            else:
                print("The field {}_Month already exists in layer {}!".format(
                    f_name, f_layer.name()))
            # counting months
            month_field = f_layer.fields().lookupField("{}_Month".format(f_name))
            f_layer.startEditing()
            i = 0
            for feat in f_layer.getFeatures():
                month = f_layer.getFeature(i)[f_name].getDate()
                dateMonth = date(int(month[0]), int(month[1]), int(month[2]))
                monthCount = (date.today().year - dateMonth.year) * \
                    12 + (date.today().month - dateMonth.month)
                f_layer.changeAttributeValue(
                    feat.id(), month_field, monthCount)
                i += 1
            f_layer.commitChanges()
# funkcja tworząca nową kolumnę INT liczaca ilośc lat które upłyneły od wygenerowanej daty do dziś date.today()

    def count_years(self):
        if self.dlg.checkBox_years.isChecked():
            # creating new field for years
            f_layer_name = self.dlg.comboBox.currentText()
            f_layer = QgsProject.instance().mapLayersByName(f_layer_name)[0]
            f_name = self.dlg.Field_name.text()
            field_index = f_layer.fields().indexFromName("{}_Years".format(f_name))
            if field_index == -1:
                layer_provider = f_layer.dataProvider()
                layer_provider.addAttributes(
                    [QgsField("{}_Years".format(f_name), QVariant.Int)])
                f_layer.updateFields()
            else:
                print("The field {}_Years already exists in layer {}!".format(
                    f_name, f_layer.name()))
            # counting years
            year_field = f_layer.fields().lookupField("{}_Years".format(f_name))
            f_layer.startEditing()
            i = 0
            for feat in f_layer.getFeatures():
                year = f_layer.getFeature(i)[f_name].getDate()
                dateYear = date(int(year[0]), int(year[1]), int(year[2]))
                f_layer.changeAttributeValue(
                    feat.id(), year_field, (relativedelta(date.today(), dateYear).years))
                i += 1
            f_layer.commitChanges()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CreateDateDialog()

        # Connections
        layers = QgsProject.instance().mapLayers().values()
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.Field_AddButton.clicked.connect(self.create_data_field)
        self.dlg.Random_dates_button.clicked.connect(self.random_dates)
        self.dlg.checkBox_days.stateChanged.connect(self.count_days)
        self.dlg.checkBox_months.stateChanged.connect(self.count_months)
        self.dlg.checkBox_years.stateChanged.connect(self.count_years)
        # Add field

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
